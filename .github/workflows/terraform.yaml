# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Deploy Infrastructure"
env:
    AWS_REGION: 'us-east-1'
    TF_VERSION: '1.4.0'
    TFLINT_VERSION: '0.46.1'  
    TFSEC_VERSION: '1.28.1'   
on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    paths: ["infrastructure/**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: write
  checks: write
  deployments: write

jobs:

  sync:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@f5d505685ccf986ef535da41cd180792c8ac3a36 # v2.0.1

      - name: Configure 1Password
        uses: 1password/load-secrets-action/configure@v3
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          
      - name: Get Secrets
        id: load-secrets
        uses: 1password/load-secrets-action@v3
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          AWS_ACCESS_KEY_ID: op://K8s/ionos/AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: op://K8s/ionos/AWS_SECRET_ACCESS_KEY
          IONOS_USERNAME: op://K8s/ionos/IONOS_USERNAME
          IONOS_PASSWORD: op://K8s/ionos/IONOS_PASSWORD
          IONOS_TOKEN: op://K8s/ionos/IONOS_TOKEN
          IONOS_ENDPOINT: op://K8s/ionos/IONOS_ENDPOINT
          MARIADB_USERNAME: op://K8s/ionos/MARIADB_USERNAME
          MARIADB_PASSWORD: op://K8s/ionos/MARIADB_PASSWORD
        
      - name: Print environment variables with masked secrets
        run: |
          echo "IONOS_USERNAME: $IONOS_USERNAME"
          echo "IONOS_PASSWORD: $IONOS_PASSWORD"
          echo "IONOS_TOKEN: $IONOS_TOKEN"
          echo "IONOS_ENDPOINT: $IONOS_ENDPOINT"
          echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
          echo "AWS_REGION: $AWS_REGION"
          echo "MARIADB_USERNAME: $MARIADB_USERNAME"
          echo "MARIADB_PASSWORD: $MARIADB_PASSWORD"

      - name: Verify Secrets Loaded
        run: |
          echo "Checking if secrets were loaded successfully..."
          if [ -z "$IONOS_USERNAME" ]; then
            echo "ERROR: IONOS_USERNAME is empty"
            exit 1
          fi
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "ERROR: AWS_ACCESS_KEY_ID is empty"
            exit 1
          fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "ERROR: AWS_SECRET_ACCESS_KEY is empty"
            exit 1
          fi
          if [ -z "$IONOS_PASSWORD" ]; then
            echo "ERROR: IONOS_PASSWORD is empty"
            exit 1
          fi
          if [ -z "$IONOS_TOKEN" ]; then
            echo "ERROR: IONOS_TOKEN is empty"
            exit 1
          fi
          echo "Secrets loaded successfully!"
        shell: bash

      - name: Install Opentofu
        uses: opentofu/setup-opentofu@000eeb8522f0572907c393e8151076c205fdba1b # v1.0.6
        with:
          tofu_wrapper: false
          
      - name: 'Install TFLint'
        run: |
            curl -sLo tflint.zip https://github.com/terraform-linters/tflint/releases/download/v${{ env.TFLINT_VERSION }}/tflint_linux_amd64.zip
            unzip tflint.zip -d /usr/local/bin/
            tflint --version
    
      - name: 'Install tfsec'
        run: |
            curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v${{ env.TFSEC_VERSION }}/tfsec-linux-amd64
            chmod +x tfsec
            mv tfsec /usr/local/bin/
            tfsec --version

      - name: Tofu fmt
        id: fmt
        working-directory: infrastructure
        run: |
          tofu fmt -recursive

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Debug AWS credentials
        run: |
            echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
            echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
            # Test AWS connectivity
            aws sts get-caller-identity

      - name: Tofu Init
        id: init
        working-directory: infrastructure
        run: |
          tofu init \
            -backend-config="access_key=$AWS_ACCESS_KEY_ID" \
            -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY" \
            -backend-config="bucket=$AWS_BUCKET_NAME" \
            -backend-config="key=$AWS_BUCKET_KEY_NAME" \
            -backend-config="region=$AWS_REGION"
        env:
          AWS_BUCKET_NAME: "ionos202030"
          AWS_BUCKET_KEY_NAME: "terraform.tfstate"

      - name: Create OpenTofu Workspace
        id: workspace
        working-directory: infrastructure
        run: |
          # Create workspace if it doesn't exist
          tofu workspace select ${{ env.WORKSPACE_NAME }} || tofu workspace new ${{ env.WORKSPACE_NAME }}
          echo "Current workspace: $(tofu workspace show)"
        env:
          WORKSPACE_NAME: ${{ github.ref_name == 'main' && 'production' || format('feature-{0}', github.ref_name) }}

      - name: Tofu Validate
        id: validate
        working-directory: infrastructure
        run: tofu validate -no-color

      - name: 'TFLint'
        run: |
          tflint --init
          tflint
  
      - name: 'tfsec'
        run: tfsec .

      - name: Tofu Plan
        working-directory: infrastructure
        run: tofu plan -lock=false -out .planfile | grep -v "Refreshing state...\|Reading...\|Read complete after"

      - name: Tofu destroy
        id: apply
        working-directory: infrastructure
        run: tofu destroy -auto-approve

      - name: Post PR comment
        continue-on-error: false
        uses: borchero/terraform-plan-comment@434458316f8f24dd073cd2561c436cce41dc8f34 # v2.4.1
        with:
          token: ${{ secrets.TOKEN }}
          planfile: .planfile
          terraform-cmd: tofu
          header: " Terraform Plan for infrastructure"
          working-directory: infrastructure
